"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _fs=_interopRequireDefault(require("fs")),_jsonschema=require("jsonschema");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}let jsonConfig,config;if(3<=process.argv.length)try{console.log("Reading configuration from %s",process.argv[2]),jsonConfig=_fs.default.readFileSync(process.argv[2])}catch(a){console.error("Failed to read configuration file: ",a.message),process.exit(1)}else try{console.log("Reading configuration from standard input"),jsonConfig=_fs.default.readFileSync(0)}catch(a){console.error("Failed to read configuration from standard input: ",a.message),process.exit(1)}try{config=JSON.parse(jsonConfig)}catch(a){console.error("Failed to parse configuration: "+a.message),process.exit(1)}const validationResult=(0,_jsonschema.validate)(config,{type:"object",properties:{listen:{oneOf:[{type:"string",enum:["systemd"]},{type:"object",properties:{port:{type:"integer",min:1,max:65535},address:{type:"string",minLength:1}},additionalProperties:!1,required:["port"]},{type:"object",properties:{path:{type:"string",minLength:1},mode:{oneOf:[{type:"string"},{type:"integer"}]}},additionalProperties:!1,required:["path"]}]},database:{type:"string",minLength:1},tokens:{type:"array",items:{type:"string",minLength:1}},labProxy:{type:"object",properties:{url:{type:"string",minLength:1},key:{type:"string",minLength:1}},required:["url","key"]},virtualbox:{type:"object",properties:{url:{type:"string",minLength:1},key:{type:"string",minLength:1}},required:["url"]},remote:{type:"string",minLength:1},appUrl:{type:"string",minLength:1},repositories:{type:"string",minLength:1},lxd:{type:"object",properties:{url:{type:"string",minLength:1},certificate:{type:"string",minLength:1},key:{type:"string",minLength:1}},required:["url","certificate","key"]},iTee:{type:"object",properties:{url:{type:"string",minLength:1},key:{type:"string",minLength:1}},required:["url"]}},required:["listen","database","appUrl"],additionalProperties:!1});if(validationResult.errors.length){console.error("Found configuration errors:");for(const a of validationResult.errors)console.error(a.message);process.exit(1)}var _default=config;exports.default=_default;