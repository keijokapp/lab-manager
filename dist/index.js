#!/usr/bin/node
"use strict";var _fs=require("fs"),_http=_interopRequireDefault(require("http")),_cleanup=_interopRequireDefault(require("./cleanup")),_common=require("./common"),_config=_interopRequireDefault(require("./config")),_app=_interopRequireDefault(require("./app"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}let notify={ready(){}};try{notify=require("sd-notify")}catch(a){_common.logger.debug("Systemd notifications are disabled")}const server=_http.default.createServer(_app.default);if(server.on("error",a=>{_common.logger.error("Server error",{e:a}),(0,_cleanup.default)(1)}),(0,_cleanup.default)((a,b)=>{if(server.close(),_common.logger.on("finish",b),_common.logger.info("Exiting...",{exit:a}),_common.logger.end(),_config.default.listen.path)try{(0,_fs.unlinkSync)(_config.default.listen.path)}catch(a){if("ENOENT"!==a.code)throw a}}),"systemd"===_config.default.listen){const a=parseInt(process.env.LISTEN_FDS,10);if(1!==a)_common.logger.error("Bad number of sockets",{socketCount:a});else{const a=process.binding("pipe_wrap");server._handle=a.constants&&"undefined"!=typeof a.constants.SOCKET?new a.Pipe(a.constants.SOCKET):new a.Pipe,server._handle.open(3),server._listen2(null,-1,-1),_common.logger.info("Listening",{fd:3}),notify.ready()}}else"port"in _config.default.listen?server.listen(_config.default.listen.port,_config.default.listen.address,()=>{const a=server.address();_common.logger.info("Listening",a),notify.ready()}):"path"in _config.default.listen&&server.listen(_config.default.listen.path,()=>{let a=!1;if("mode"in _config.default.listen)try{(0,_fs.chmodSync)(_config.default.listen.path,_config.default.listen.mode)}catch(b){a=!0,_common.logger.error("ERR_INVALID_ARG_VALUE"===b.code?"Bad socket mode":"Failed to set socket mode",{path:_config.default.listen.path,mode:_config.default.listen.mode}),server.close()}a||(_common.logger.info("Listening",{path:_config.default.listen.path}),notify.ready())});