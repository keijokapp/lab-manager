"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _express=require("express"),_expressOpenapiMiddleware=require("express-openapi-middleware"),_common=require("../common"),_renderLayout=_interopRequireDefault(require("../render-layout"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const routes=new _express.Router;var _default=routes;exports.default=_default,routes.use((a,b,c)=>{(0,_common.authorize)(a.token)?c():b.status(403).send({error:"Permission Denied",message:"Client is not authorized"})}),routes.get("/",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Machine"],summary:"List virtual machines",parameters:[{in:"query",name:"templates",description:"Fetch templates only",schema:{type:"string"}},{in:"query",name:"running",description:"Fetch running machines only",schema:{type:"string"}},{in:"query",name:"detailed",description:"Ask for machine details",schema:{type:"string"}},{in:"query",name:"ip",description:"Ask for machine IP-s",schema:{type:"string"}}],responses:{200:{description:"List of machines"}}}),(a,b,c)=>{function d(c){const d=[];return"running"in a.query&&d.push("running"),"templates"in a.query&&d.push("filter="+encodeURIComponent("-template$")),("detailed"in a.query||c)&&d.push("detailed"),("ip"in a.query||c)&&d.push("ip"),(0,_common.virtualboxRequest)("/machine?"+d.join("&")).then(a=>a.ok?a.json():a.text().then(c=>(_common.logger.error("Failed to request machines",{body:c}),b.status(a.status).send(c),Promise.reject(new Error("Failed to request machines")))))}const e="templates"in a.query?1:"running"in a.query?2:0;let f;f="running"in a.query&&"templates"in a.query?"Running templates":"templates"in a.query?"Templates":"running"in a.query?"Running machines":"Virtual machines",b.format({html:function(){d(!0).then(a=>{b.send((0,_renderLayout.default)(f,{machines:a,activeTab:e},"<script src=\"bundle/machine.js\"></script>"))}).catch(c)},json:function(){d().then(a=>{b.send(a)}).catch(c)}})}),routes.get("/:machine",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Machine"],summary:"Fetch virtual machine",parameters:[{in:"path",name:"machine",description:"Machine name",required:!1,schema:{type:"string",minLength:1}},{in:"query",name:"ip",description:"Ask for machine IP-s",schema:{type:"string"}}],responses:{200:{description:"Machine"},404:{description:"Machine does not exist"}}}),(a,b,c)=>{(0,_common.virtualboxRequest)("/machine/"+encodeURIComponent(a.params.machine)+("ip"in a.query?"?ip":"")).then(a=>a.ok?a.json().then(c=>{b.status(a.status).send(c)}):a.text().then(c=>{b.status(a.status).send(c)})).catch(c)}),routes.put("/:machine",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Machine"],summary:"Update state of virtual machine",parameters:[{in:"path",name:"machine",description:"Machine name",required:!1,schema:{type:"string",minLength:1}},{in:"query",name:"ip",description:"Ask for machine IP-s",schema:{type:"string"}}],requestBody:{description:"Machine state",required:!0,content:{"application/json":{schema:{type:"object"}}}},responses:{200:{description:"Machine"},404:{description:"Machine does not exist"}}}),(a,b,c)=>{(0,_common.virtualboxRequest)("/machine/"+encodeURIComponent(a.params.machine)+("ip"in a.query?"?ip":""),{method:"PUT",body:a.body}).then(a=>a.ok?a.json().then(c=>{b.status(a.status).send(c)}):a.text().then(c=>{b.status(a.status).send(c)})).catch(c)}),routes.post("/:machine/snapshot/:snapshot",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Machine"],summary:"Update state of virtual machine",parameters:[{in:"path",name:"machine",description:"Machine name",required:!1,schema:{type:"string",minLength:1}},{in:"path",name:"snapshot",description:"Snapshot name",schema:{type:"string",minLength:1}}],responses:{200:{description:"Snapshot has been created"}}}),(a,b,c)=>{(0,_common.virtualboxRequest)("/machine/"+encodeURIComponent(a.params.machine)+"/snapshot/"+encodeURIComponent(a.params.snapshot),{method:"POST"}).then(a=>a.ok?a.json().then(c=>{b.status(a.status).send(c)}):a.text().then(c=>{b.status(a.status).send(c)})).catch(c)});