"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.routes=void 0;var _nodeFetch=_interopRequireDefault(require("node-fetch")),_v=_interopRequireDefault(require("uuid/v4")),_express=require("express"),_expressOpenapiMiddleware=require("express-openapi-middleware"),_config=_interopRequireDefault(require("../config")),_util=require("../util"),_common=require("../common"),_createInstance=_interopRequireDefault(require("../create-instance"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const MACHINE_ID_MULTIPLIER=Math.pow(2,48);function instanceToLabUser(a){return{id:a.iTeeCompat.instanceId,lab_id:a.iTeeCompat.labId,user_id:a.iTeeCompat.userId,start:"startTime"in a?a.startTime:null,end:null,uuid:a.privateToken,token:a.publicToken}}function instanceToLabinfo(a){return{success:!0,lab:{name:a.lab._id,lab_hash:"assistant"in a.lab?a.lab.assistant.lab:"",lab_token:"assistant"in a.lab?a.lab.assistant.key:""},assistant:"assistant"in a.lab?{uri:a.lab.assistant.url,enabled:!0,version:"v2"}:null,labuser:{start:a.startTime,end:null,uuid:a.privateToken,token:a.publicToken},user:{username:a.username,user_key:"assistant"in a?a.assistant.userKey:""},vms:"machineOrder"in a.lab?a.lab.machineOrder.map((b,c)=>({name:a.machines[b].name,lab_vmt:{name:a.lab.machines[b].base,nickname:a.lab.machines[b].description,position:c,primary:a.lab.primaryMachine===b,allow_remote:!!a.lab.machines[b].enable_remote,enable_rdp:!!a.lab.machines[b].enable_remote,allow_restart:!!a.lab.machines[b].enable_restart,expose_uuid:!a.lab.machines[b].enable_private,lab_vmt_networks:a.lab.machines[b].networks.map((a,b)=>({slot:b+1,promiscuous:!!a.promiscuous,reinit_mac:!!a.resetMac,ip:"ip"in a?a.ip:"",network:{name:a.name,net_type:"virtualbox"===a.type?"intnet":"bridged"}})),vmt:{image:a.lab.machines[b].base,username:a.lab.machines.instance.lab.machines[b].base}}})):[]}}async function getInstance(a,b){const c=await _common.db.query(function(a){"iTeeCompat"in a&&(emit(a.iTeeCompat.instanceId),emit([a.iTeeCompat.labId,a.iTeeCompat.userId]))},{key:b===void 0?a:[a,b],include_docs:!0});let d,e,f=!1;for(const g of c.rows)g.doc._id.startsWith("instance/")?(d&&(f=!0),d=g.doc,d._id=d._id.slice(9)):g.doc._id.startsWith("i-tee-compat/")&&(e&&(f=!0),e=g.doc,e._id=e._id.slice(13));if(f)throw _common.logger.error("I-Tee compatibility state",{rows:c.rows}),new Error("Ambiguous I-Tee compatibility state");return[d,e]}async function fetchITeeUser(a){const b=await(0,_nodeFetch.default)(_config.default.iTee.url+"/users.json?conditions[id]="+encodeURIComponent(a)+"&auth_token="+encodeURIComponent(_config.default.iTee.key),{headers:{"x-request-id":(0,_common.reqid)()}}),c=await b.json();return b.ok&&Array.isArray(c)?1===c.length?c[0]:null:void _common.logger.error("Failed to fetch user name from I-Tee",{user:a,status:b.status,response:c})}async function fetchITeeLab(a){const b=await(0,_nodeFetch.default)(_config.default.iTee.url+"/labs.json?conditions[id]="+encodeURIComponent(a)+"&auth_token="+encodeURIComponent(_config.default.iTee.key),{headers:{"x-request-id":(0,_common.reqid)()}}),c=await b.json();return b.ok&&Array.isArray(c)?1===c.length?c[0]:null:void _common.logger.error("Failed to fetch lab from I-Tee",{lab:a,status:b.status,response:c})}const routes=new _express.Router;exports.routes=routes;var _default=(a,b,c)=>{let d=!1;if("auth_token"in a.query)d=(0,_common.authorize)(a.query.auth_token);else if(a.body instanceof Object&&"auth_token"in a.body)d=(0,_common.authorize)(a.body.auth_token),delete a.body.auth_token;else if(/^\/labinfo.json(\?|$)/.test(a.url))d=!0;else return void c();d?routes(a,b,c):b.status(403).send({success:!1,message:"Client is not authorized"})};exports.default=_default,routes.get("/",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],responses:{200:{content:{"text/plain":{example:"OK"}}}}}),(a,b)=>{b.send("OK")}),routes.get("/lab_users.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Fetch matching instances converted to I-Tee `labuser` objects",requestBody:{required:!0,content:{"application/json":{schema:{oneOf:[{type:"object",properties:{conditions:{type:"object",properties:{user_id:{type:"integer",minValue:1},lab_id:{type:"integer",minValue:1}},additionalProperties:!1,required:["user_id","lab_id"]}},additionalProperties:!1,required:["conditions"]},{type:"object",properties:{conditions:{type:"object",properties:{id:{type:"integer",minValue:1}},additionalProperties:!1,required:["id"]}},additionalProperties:!1,required:["conditions"]}]}}}},responses:{200:{description:"Array of matching I-Tee `labuser` objects",content:{"application/json":{schema:{type:"array",items:{type:"object"}}}}},503:{content:{"application/json":{example:{success:!1,message:"I-Tee integration is not fully configured"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{let c,d;if("id"in a.body.conditions)[c,d]=await getInstance(a.body.conditions.id);else if("iTee"in _config.default&&"key"in _config.default.iTee)[c,d]=await getInstance(a.body.conditions.lab_id,a.body.conditions.user_id);else return void b.status(503).send(a.apiOperation.responses[503].content["application/json"].example);c?b.send([instanceToLabUser(c)]):d?b.send([instanceToLabUser(d)]):b.send([])})),routes.post("/lab_users.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Create I-Tee `labuser` object",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{lab_user:{type:"object",properties:{user_id:{type:"integer",minValue:1},lab_id:{type:"integer",minValue:1}},additionalProperties:!1,required:["user_id","lab_id"]}},additionalProperties:!1,required:["lab_user"]}}}},responses:{200:{description:"I-Tee `labuser` has been created",content:{"application/json":{example:{success:!0,lab_user:{}}}}},404:{content:{"application/json":{example:{success:!1,message:"Lab or user was not found"}}}},400:{content:{"application/json":{example:{success:!1,message:"Lab user exists"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{if(!("iTee"in _config.default&&"key"in _config.default.iTee))return void b.status(503).send({success:!1,message:"I-Tee integration is not fully configured"});const[c,d]=await Promise.all([fetchITeeLab(a.body.lab_user.lab_id),fetchITeeUser(a.body.lab_user.user_id)]);if(void 0===c||void 0===d)return void b.status(500).send({success:!1,message:"Internal Server Error"});if(!c||!d||!/^[a-zA-Z0-9-]+$/.test(c.name))return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);const f={_id:"i-tee-compat/"+c.name+":"+d.username,username:d.username,iTeeCompat:{instanceId:Date.now(),labId:c.id,userId:d.id},lab:{_id:c.name},privateToken:(0,_v.default)(),publicToken:(0,_v.default)()};try{await _common.db.post(f)}catch(g){return void("conflict"===g.name?b.status(400).send(a.apiOperation.responses[400].content["application/json"].example):(_common.logger.error("Failed to create I-Tee compatibility object",{id:f._id,labId:c.id,userId:d.id,e:g.message}),b.status(500).send({success:!1,message:"Internal Server Error"})))}b.send({success:!0,lab_user:instanceToLabUser(f)})})),routes.post("/set_vta_info.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Set VirtualTA info on I-Tee `labuser`",requestBody:{required:!0,content:{"application/json":{schema:{body:{type:"object",properties:{id:{type:"integer",min:1},host:{type:"string",minLength:1},name:{type:"string",minLength:1},version:{type:"string",enum:["v1","v2"]},token:{type:"string",minLength:1},lab_hash:{type:"string",minLength:1},user_key:{type:"string",minLength:1}},additionalProperties:!1,required:["id","host","name","version","token","lab_hash","user_key"]}}}}},responses:{200:{description:"Teaching assistant info has been set",content:{"application/json":{example:{success:!0,message:"Teaching assistant has been initialized"}}}},400:{content:{"application/json":{example:{success:!1,message:"Unable to set VirtualTA info on running lab"}}}},404:{content:{"application/json":{example:{success:!1,message:"Lab instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const[c,d]=await getInstance(a.body.id);if(!c&&!d)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);if(c)return _common.logger.warn("Unable to set VirtualTA info on running lab",{id:a.body.id,instance:c._id}),void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);d.lab.assistant={url:a.body.host,lab:a.body.lab_hash,key:a.body.token},d.assistant={userKey:a.body.user_key,link:d.lab.assistant.url+"/"+encodeURIComponent(d.lab.assistant.lab)+"/"+encodeURIComponent(a.body.user_key)};try{d._id="i-tee-compat/"+d._id,await _common.db.put(d)}catch(a){if("conflict"===a.name)return _common.logger.warn("Conflict updating VirtualTA info",{id:d._id,rev:d._rev}),void b.status(400).send({success:!1,message:"Concurrency problems, eh?"});throw a}b.send(a.apiOperation.responses[200].content["application/json"].example)})),routes.post("/start_lab_by_id.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Start lab referenced by given I-Tee `labuser`",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{labuser_id:{type:"integer",min:1}},additionalProperties:!1,required:["labuser_id"]}}}},responses:{200:{description:"Lab has been started",content:{"application/json":{example:{success:!0,message:"Lab has been started",lab_user:123,start_time:"2018-09-04T12:56:40.069Z"}}}},400:{content:{"application/json":{example:{success:!1,message:"Unable to start already running lab"}}}},404:{content:{"application/json":{example:{success:!1,message:"Lab or instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{let[c,d]=await getInstance(a.body.labuser_id);if(!c&&!d)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);if(c)return _common.logger.warn("Unable to start already running lab",{id:a.body.id,instance:c._id}),void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);try{const a=await _common.db.get("lab/"+d.lab._id);"assistant"in d.lab&&(a.assistant=d.lab.assistant),a._id=a._id.slice(4),d.lab=a}catch(c){if("not_found"===c.name)return _common.logger.debug("Lab for I-Tee compatibility object was not found",{iTeeCompat:d}),void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);throw c}c=await(0,_createInstance.default)(d),"string"==typeof c?b.status("Instance already exists"===c?400:500).send({success:!1,message:c}):b.send({success:!0,message:"Lab has been started",lab_user:c.iTeeCompat.instanceId,start_time:c.startTime})})),routes.post("/end_lab_by_id.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"End lab referenced by given I-Tee `labuser`",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{labuser_id:{type:"integer",min:1}},additionalProperties:!1,required:["labuser_id"]}}}},responses:{200:{description:"Lab has been ended",content:{"application/json":{example:{success:!0,message:"Lab has been ended",lab_user:123,end_time:"2018-09-04T12:56:40.069Z"}}}},400:{content:{"application/json":{example:{success:!1,message:"Unable to start already running lab"}}}},404:{content:{"application/json":{example:{success:!1,message:"Lab instance does not exist"}}}},409:{description:"Instance's state was changed while processing the request.",content:{"application/json":{example:{error:"Conflict",message:"Revision mismatch"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const[c,d]=await getInstance(a.body.labuser_id);if(!c&&!d)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);if(!c)return _common.logger.warn("Unable to end stopped lab",{id:a.body.id,instance:c._id}),void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);if(d){d.privateToken=(0,_v.default)(),d.publicToken=(0,_v.default)();try{await _common.db.put(d)}catch(c){if("conflict"===c.name)b.status(409).send(a.apiOperation.responses[409].content["application/json"].example);else if("not_found"!==c.name)throw c}}try{await(0,_common.deleteInstance)(c)}catch(c){if("conflict"===c.name)return void b.status(409).send(a.apiOperation.responses[409].content["application/json"].example);throw c}b.send({success:!0,message:"Lab has been ended",lab_user:c.iTeeCompat.instanceId,end_time:new Date})})),routes.get("/labuser_vms.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Fetch machines attached to I-Tee `labuser`",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{id:{type:"integer",min:1}},additionalProperties:!1,required:["id"]}}}},responses:{200:{description:"Lab has been started",content:{"application/json":{example:{success:!0,vms:[{}],lab_user:123}}}},404:{content:{"application/json":{example:{success:!1,message:"Lab instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const[c,d]=await getInstance(a.body.id);if(!c&&!d)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);if(!c)return void b.send({success:!0,vms:[],lab_user:d.iTeeCompat.instanceId});const e=[];if("machines"in c){const a=[];for(const b in c.lab.machineOrder){const d=c.lab.machineOrder[b],f=c.lab.machines[d],g=c.machines[d],h={vm_id:(b+1)*MACHINE_ID_MULTIPLIER+c.iTeeCompat.instanceId,nickname:f.description,expose_uuid:!!f.enable_private,allow_remote:!!f.enable_remote,allow_restart:!!f.enable_restart,guacamole_type:f.enable_remote?"rdp":"none",position:+b,primary:d===c.lab.primaryMachine,vm_rdp:[]};switch(f.type){case"lxd":a.push((0,_common.lxdMachineInfo)(g.name));break;case"virtualbox":a.push((0,_common.virtualboxMachineInfo)(g.name,!1));break;default:_common.logger.error("Failed to get machine info",{type:type,machine:g.name,e:"Unknown machine type"}),a.push(null);}e.push(h)}const b=await Promise.all(a);b.forEach((a,b)=>{a&&(e[b].state=a.state)})}b.send({success:!0,vms:e,lab_user:c.iTeeCompat.instanceId})})),routes.get("/open_guacamole.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Get remote console connection string",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{id:{type:"integer",min:1}},additionalProperties:!1,required:["id"]}}}},responses:{200:{content:{"application/json":{example:{success:!0,url:"https://labhost.example.com/remote/privateToken:machineId"}}}},400:{content:{"application/json":{example:{success:!1,message:"Bad machine index"}}}},403:{content:{"application/json":{example:{success:!1,message:"Remote console is not enabled"}}}},404:{content:{"application/json":{example:{success:!1,message:"Instance does not exist"}}}},501:{content:{"application/json":{example:{success:!1,message:"Remote console is not available"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{if(!("remote"in _config.default))return void b.status(501).send({success:!1,message:"Remote console is not available"});const c=a.body.id%MACHINE_ID_MULTIPLIER,d=Math.floor(a.body.id/MACHINE_ID_MULTIPLIER)-1,e=await _common.db.query(function(a){~a._id.indexOf("instance/")&&"iTeeCompat"in a&&emit(a.iTeeCompat.instanceId)},{key:c,include_docs:!0});if(1!==e.rows.length)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);const f=e.rows[0].doc;if(!(d in f.lab.machineOrder))return void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);const g=f.lab.machines[f.lab.machineOrder[d]];g&&g.enable_remote?b.send({success:!0,url:_config.default.remote+"/"+encodeURIComponent(f.publicToken)+":"+encodeURIComponent(f.lab.machineOrder[d])}):b.status(403).send(a.apiOperation.responses[403].content["application/json"].example)})),routes.get("/start_vm.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Start virtual machine",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{id:{type:"integer",min:1}},additionalProperties:!1,required:["id"]}}}},responses:{200:{content:{"application/json":{example:{success:!0,message:"Machine has been started"}}}},400:{content:{"application/json":{example:{success:!1,message:"Bad machine index"}}}},403:{content:{"application/json":{example:{success:!1,message:"Power control is not enabled"}}}},404:{content:{"application/json":{example:{success:!1,message:"Instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c=a.body.id%MACHINE_ID_MULTIPLIER,d=Math.floor(a.body.id/MACHINE_ID_MULTIPLIER)-1,e=await _common.db.query(function(a){~a._id.indexOf("instance/")&&"iTeeCompat"in a&&emit(a.iTeeCompat.instanceId)},{key:c,include_docs:!0});if(1!==e.rows.length)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);const f=e.rows[0].doc;if(!(d in f.lab.machineOrder))return void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);const g=f.lab.machines[f.lab.machineOrder[d]],h=f.machines[f.lab.machineOrder[d]];if(!g||!h||!g.enable_restart)b.status(403).send(a.apiOperation.responses[403].content["application/json"].example);else{let c;switch(g.type){case"lxd":c=await(0,_common.lxdUpdateMachine)(h.name,{state:"running"});break;case"virtualbox":c=await(0,_common.virtualboxUpdateMachine)(h.name,{state:"running"});}c?b.send(a.apiOperation.responses[200].content["application/json"].example):b.status(500).send({success:!1,message:"Failed to power machine off"})}})),routes.get("/stop_vm.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Stop virtual machine",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{id:{type:"integer",min:1}},additionalProperties:!1,required:["id"]}}}},responses:{200:{content:{"application/json":{example:{success:!0,message:"Machine has been started"}}}},400:{content:{"application/json":{example:{success:!1,message:"Bad machine index"}}}},403:{content:{"application/json":{example:{success:!1,message:"Power control is not enabled"}}}},404:{content:{"application/json":{example:{success:!1,message:"Instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c=a.body.id%MACHINE_ID_MULTIPLIER,d=Math.floor(a.body.id/MACHINE_ID_MULTIPLIER)-1,e=await _common.db.query(function(a){~a._id.indexOf("instance/")&&"iTeeCompat"in a&&emit(a.iTeeCompat.instanceId)},{key:c,include_docs:!0});if(1!==e.rows.length)return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);const f=e.rows[0].doc;if(!(d in f.lab.machineOrder))return void b.status(400).send(a.apiOperation.responses[400].content["application/json"].example);const g=f.lab.machines[f.lab.machineOrder[d]],h=f.machines[f.lab.machineOrder[d]];if(!g||!h||!g.enable_restart)b.status(403).send(a.apiOperation.responses[403].content["application/json"].example);else{let c;switch(g.type){case"lxd":c=await(0,_common.lxdUpdateMachine)(h.name,{state:"poweroff"});break;case"virtualbox":c=await(0,_common.virtualboxUpdateMachine)(h.name,{state:"poweroff"});}c?b.send(a.apiOperation.responses[200].content["application/json"].example):b.status(500).send({success:!1,message:"Failed to power machine off"})}})),routes.all("/labinfo.json",(0,_expressOpenapiMiddleware.apiOperation)({tags:["I-Tee compatibility"],summary:"Stop virtual machine",parameters:[{in:"query",name:"uuid",description:"private token of lab instance",required:!0,schema:{type:"object",properties:{uuid:{type:"string",minLength:1}},required:["uuid"]}}],responses:{200:{content:{"application/json":{example:{success:!0,message:"Machine has been started"}}}},404:{content:{"application/json":{example:{success:!1,message:"Instance does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c=await _common.db.query("instance/uuid",{key:a.query.uuid,include_docs:!0});1!==c.rows.length||a.query.uuid!==c.rows[0].doc.privateToken?b.status(404).send({success:!1,message:"Instance does not exists"}):b.send(instanceToLabinfo(c.rows[0].doc))}));