"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _express=require("express"),_ajv=_interopRequireDefault(require("ajv")),_expressOpenapiMiddleware=require("express-openapi-middleware"),_util=require("../util"),_common=require("../common"),_renderLayout=_interopRequireDefault(require("../render-layout")),_createInstance=_interopRequireDefault(require("../create-instance")),_instanceSubroutes=_interopRequireDefault(require("./instance-subroutes"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const routes=new _express.Router;var _default=routes;exports.default=_default;const labSchema={type:"object",properties:{_id:{type:"string",pattern:"^[a-zA-Z0-9-]+$"},_rev:{type:"string"},machines:{type:"object",minItems:1,additionalProperties:{type:"object",oneOf:[{properties:{type:{type:"string",enum:["virtualbox"]},base:{type:"string",pattern:"^[a-zA-Z0-9-]+-template$"},description:{type:"string"},enable_autostart:{type:"boolean"},enable_private:{type:"boolean"},enable_remote:{type:"boolean"},enable_restart:{type:"boolean"},networks:{type:"array",items:{type:"object",properties:{type:{type:"string",enum:["bridged","virtualbox"]},name:{type:"string",pattern:"^[a-zA-Z0-9-]+$"},ip:{type:"string",minLength:1},promiscuous:{type:"boolean"},resetMac:{type:"boolean"}},required:["type","name"],additionalProperties:!1}}},additionalProperties:!1,required:["type","base","description","networks"]},{properties:{type:{type:"string",enum:["lxd"]},base:{type:"string",pattern:"^[a-zA-Z0-9-]+-template$"},description:{type:"string"},enable_autostart:{type:"boolean"},enable_private:{type:"boolean"},enable_restart:{type:"boolean"},networks:{type:"array",items:{type:"object",properties:{name:{type:"string",pattern:"^[a-zA-Z0-9-]+$"}},required:["name"],additionalProperties:!1}},limits:{type:"object",properties:{cpu:{type:"integer",min:1},cpuAllowance:{type:"integer",min:1,max:99},memory:{type:"integer",min:1}},minProperties:1},repositories:{type:"array",items:{type:"object",properties:{name:{type:"string",pattern:"^[a-zA-Z0-9_-]+$"},location:{type:"string",pattern:"^/.+$"},ref:{type:"string",pattern:"^[a-zA-Z0-9_/-]+$"}},additionalProperties:!1,required:["name","location","ref"]},minItems:1}},additionalProperties:!1,required:["type","base","description","networks"]}]}},machineOrder:{type:"array",items:{type:"string",minLength:1}},primaryMachine:{type:"string",minLength:1},assistant:{type:"object",properties:{url:{type:"string",minLength:1},key:{type:"string",minLength:1},lab:{type:"string",minLength:1}},additionalProperties:!1},repositories:{type:"object",patternProperties:{"^[a-zA-Z0-9_-]+$":{type:"object",properties:{name:{type:"string",pattern:"^[a-zA-Z0-9_-]+$"},head:{type:"string",pattern:"^[a-zA-Z0-9_/-]+$"}},required:["name"]}},minItems:1},endpoints:{type:"array",uniqueItems:!0,items:{type:"string",minLength:1}},gitlab:{type:"object",properties:{url:{type:"string",minLength:1},key:{type:"string",minLength:1}},additionalProperties:!1,required:["url","key"]}},additionalProperties:!1,dependencies:{machines:["machineOrder"],machineOrder:["machines"],primaryMachine:["machines"]}},validateLab=new _ajv.default().compile(labSchema);function normalizeMachines(a){if("machines"in a){const b=Array(Object.keys(a.machines).length),c=[],d=a.machineOrder;for(const e of d)e in a.machines&&(c.push(e),b[e]=!0);for(const d in a.machines)b[d]||c.push(d);a.primaryMachine in a.machines||delete a.primaryMachine}}routes.use((a,b,c)=>{(0,_common.authorize)(a.token)?c():b.status(403).send({error:"Permission Denied",message:"Client is not authorized"})}),routes.get("/",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Lab"],summary:"List labs",responses:{200:{description:"List of labs",content:{"application/json":{schema:{type:"array",items:labSchema}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c=await _common.db.allDocs({startkey:"lab/",endkey:"lab/\uFFFF",include_docs:!0}),d=c.rows.map(a=>(a.doc._id=a.doc._id.slice(4),a.doc));b.format({html:function(){b.send((0,_renderLayout.default)((0,_util.getPathPrefix)(a),"Labs",{labs:d},"<script src=\"bundle/lab.js\"></script>"))},json:function(){b.send(d)}})})),routes.post("/:lab",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Lab"],summary:"Create lab",parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:{type:"string",minLength:1}}],requestBody:{required:!0,content:{"application/json":{schema:labSchema}}},responses:{200:{headers:{etag:{description:"Lab E-Tag",schema:labSchema.properties._rev}},content:{"application/json":{schema:labSchema}}},409:{content:{"application/json":{example:{error:"Conflict",message:"Lab with given id already exists"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c={...a.body,_id:"lab/"+a.params.lab,_rev:void 0};normalizeMachines(c);try{const a=await _common.db.post(c);c._id=a.id.slice(4),c._rev=a.rev,b.set("etag",c._rev),b.send(c)}catch(c){if("conflict"===c.name)b.status(409).send(a.apiOperation.responses[409].content["application/json"].example);else throw c}})),routes.put("/:lab",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Lab"],summary:"Update lab",parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:{type:"string",minLength:1}},{in:"header",name:"if-match",description:"Lab E-Tag",required:!0,schema:{type:"string",minLength:1}}],requestBody:{required:!0,content:{"application/json":{schema:labSchema}}},responses:{200:{headers:{etag:{description:"Lab E-Tag",schema:labSchema.properties._rev}},content:{"application/json":{schema:labSchema}}},404:{content:{"application/json":{example:{error:"Not Found",message:"Lab does not exist"}}}},409:{content:{"application/json":{example:{error:"Conflict",message:"Revision mismatch"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c={...a.body,_id:"lab/"+a.params.lab,_rev:a.headers["if-match"]};normalizeMachines(c);try{const a=await _common.db.put(c);c._id=a.id.slice(4),c._rev=a.rev,b.set("etag",c._rev),b.send(c)}catch(c){if("not_found"===c.name)b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);else if("conflict"===c.name)b.status(409).send(a.apiOperation.responses[409].content["application/json"].example);else throw c}})),routes.get("/:lab",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Lab"],summary:"Fetch lab",parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:labSchema.properties._id}],responses:{200:{headers:{etag:{description:"Lab E-Tag",schema:labSchema.properties._rev}},content:{"application/json":{schema:labSchema}}},404:{content:{"application/json":{example:{error:"Not found",message:"Lab does not exist"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{try{const c=await _common.db.get("lab/"+a.params.lab);c._id=c._id.slice(4),b.set("etag",c._rev),b.format({html:function(){b.send((0,_renderLayout.default)((0,_util.getPathPrefix)(a),"Lab",{lab:c},"<script src=\"bundle/lab.js\"></script>"))},json:function(){b.send(c)}})}catch(c){if("not_found"===c.name)b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);else throw c}})),routes.delete("/:lab",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Lab"],summary:"Delete lab",parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:{type:"string",minLength:1}},{in:"header",name:"if-match",description:"Instance E-Tag",required:!0,schema:{type:"string",minLength:1}}],responses:{200:{description:"Lab has been deleted"},404:{content:{"application/json":{example:{error:"Not Found",message:"Lab does not exist"}}}},409:{content:{"application/json":{example:{error:"Conflict",message:"Revision mismatch"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{try{await _common.db.remove("lab/"+a.params.lab,a.headers["if-match"]),b.send({})}catch(c){if("not_found"===c.name)b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);else if("conflict"===c.name)throw b.status(409).send(a.apiOperation.responses[409].content["application/json"].example),c}})),routes.post("/:lab/instance/:username",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Instance"],summary:"Start lab",parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:labSchema.properties._id},{in:"path",name:"username",description:"Username",required:!0,schema:{type:"string",minLength:1}},{in:"header",name:"if-match",description:"Lab E-Tag",schema:labSchema.properties._rev}],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{lab:labSchema},additionalProperties:!1}}}},responses:{200:{description:"Instance"},404:{content:{"application/json":{example:{error:"Not found",message:"Lab does not exist"}}}},409:{content:{"application/json":{example:{error:"Conflict",message:"Instance already exists"}}}},410:{content:{"application/json":{example:{error:"Gone",message:"Requested lab revision is not available"}}}},412:{content:{"application/json":{example:{error:"Precondition Failed",message:"Requested lab is in invalid state",errors:[]}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{const c=a.params.username;let d;if(a.body instanceof Object&&"lab"in a.body)d=a.body.lab,d._id=a.params.lab,delete d._rev;else{try{d=await _common.db.get("lab/"+a.params.lab)}catch(c){if("not_found"===c.name)b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);else throw c;return}if("if-match"in a.headers&&d._rev!==a.headers["if-match"])return void b.status(410).send(a.apiOperation.responses[410].content["application/json"].example);d._id=d._id.slice(4);const c=validateLab(d);if(!c)return void b.status(410).send({...a.apiOperation.responses[410].content["application/json"].example,errors:validateLab.errors})}const e=await(0,_createInstance.default)({_id:"instance/"+d._id+":"+c,lab:d,username:c});"string"==typeof e?"Instance already exists"===e?b.status(409).send(a.apiOperation.responses[409].content["application/json"].example):b.status(500).send({error:"Internal Server Error",message:e}):(e._id=e._id.slice(9),b.send(e))})),routes.use("/:lab/instance/:username",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Instance"],parameters:[{in:"path",name:"lab",description:"Lab name",required:!0,schema:{type:"string",minLength:1}},{in:"path",name:"username",description:"Username",required:!0,schema:{type:"string",minLength:1}}]}),(a,b,c)=>{_common.db.get("instance/"+a.params.lab+":"+a.params.username).then(b=>{b._id=b._id.slice(9),a.instance=b,a.instanceToken=b.privateToken,c()},a=>{"not_found"===a.name?c():c(a)})}),routes.delete("/:lab/instance/:username",(0,_expressOpenapiMiddleware.apiOperation)({summary:"End lab",parameters:[{in:"header",name:"if-match",description:"Instance E-Tag",required:!0,schema:{type:"string",minLength:1}}],responses:{200:{description:"Lab has been ended"},404:{content:{"application/json":{example:{error:"Not found",message:"Instance does not exist"}}}},409:{content:{"application/json":{example:{error:"Conflict",message:"Revision mismatch"}}}}}}),(a,b,c)=>{if(!("instance"in a))return void b.status(404).send(a.apiOperation.responses[404].content["application/json"].example);const d=a.instance;d._rev=a.headers["if-match"],(0,_common.deleteInstance)(d).then(()=>{b.send({})}).catch(d=>{"conflict"===d.name?b.status(409).send(a.apiOperation.responses[409].content["application/json"].example):c(d)})}),routes.use("/:lab/instance/:username",_instanceSubroutes.default);