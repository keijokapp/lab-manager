"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _fs=require("fs"),_child_process=require("child_process"),_express=_interopRequireDefault(require("express")),_react=_interopRequireDefault(require("react")),_expressOpenapiMiddleware=require("express-openapi-middleware"),_config=_interopRequireDefault(require("../config")),_common=require("../common"),_renderLayout=_interopRequireDefault(require("../render-layout")),_util=require("../util");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const routes=new _express.default.Router;var _default=routes;exports.default=_default;async function getRepositoryRefs(a){try{return new Promise(b=>{(0,_child_process.execFile)("git",["-C",_config.default.repositories+"/"+a+".git","show-ref"],(c,d)=>{if(c)_common.logger.error("Failed to read refs of repository",{repository:a,e:c.message}),b(null);else{const a={},c=d.split("\n");for(const b of c){const[c,d]=b.split(" ");c&&d&&d.startsWith("refs/heads/")&&(a[d.slice(11)]=c)}b(a)}})})}catch(b){_common.logger.error("Failed to read refs of repository",{repository:a,e:b.message})}return null}async function fetchRepository(a){try{return new Promise(b=>{(0,_child_process.execFile)("git",["-C",_config.default.repositories+"/"+a+".git","fetch","-a","--prune"],c=>{c?(_common.logger.error("Failed to fetch remote refs",{repository:a,e:c.message}),b(!1)):b(!0)})})}catch(b){_common.logger.error("Failed to fetch remote refs",{repository:a,e:b.message})}return!1}const repositorySchema={type:"object",properties:{_id:{description:"Name",type:"string",minLength:1},link:{description:"Clone URL",type:"string",minLength:1},refs:{description:"Ref/commit map",type:"object"}}};routes.get("/",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Repository"],summary:"List repositories",responses:{200:{description:"List of repositories",content:{"application/json":{schema:{type:"array",items:repositorySchema}}}},501:{content:{"application/json":{example:{error:"Not Implemented",message:"Repositories are not available"}}}}}}),(0,_util.asyncMiddleware)(async(a,b)=>{if(!(0,_common.authorize)(a.token))return void b.status(403).send({error:"Permission Denied",message:"Client is not authorized"});if(!("repositories"in _config.default))return void b.status(501).send(a.apiOperation.responses[501].content["application/json"].example);let c=!1;const d=await new Promise((b,d)=>{(0,_fs.readdir)(_config.default.repositories,(f,e)=>{if(f)d(f);else{const d=[];for(const b of e)if(b.endsWith(".git")){const e=b.slice(0,-4);d.push(getRepositoryRefs(e).then(b=>null===b?void(c=!0):{_id:e,refs:b,link:(0,_util.getRootUrl)(a)+"/repository/"+e+".git"}))}Promise.all(d).then(b)}})});return c?void b.status(500).send({error:"Internal Server Error",message:"Failed to get refs"}):void b.format({html:function(){b.send((0,_renderLayout.default)((0,_util.getPathPrefix)(a),"Repositories",{repositories:d},"<script src=\"bundle/repository.js\"></script>"))},json:function(){b.send(d)}})})),routes.get("/:repository",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Repository"],summary:"Get repository",parameters:[{in:"path",name:"repository",description:"Repository name",required:!0,schema:{type:"string",pattern:"^[a-zA-Z0-9-_]+$"}}],responses:{200:{description:"Repository",content:{"application/json":{schema:repositorySchema}}},501:{content:{"application/json":{example:{error:"Not Implemented",message:"Repositories are not available"}}}}}}),(a,b)=>{(0,_common.authorize)(a.token)?"repositories"in _config.default?getRepositoryRefs(a.params.repository).then(c=>{null===c?b.status(500).send({error:"Internal Server Error",message:"Failed to read refs of repository"}):b.send({_id:a.params.repository,refs:c})}):b.status(501).send({error:"Not Implemented",message:"Repositories are not available"}):b.status(403).send({error:"Permission Denied",message:"Client is not authorized"})}),routes.post("/:repository/fetch",(0,_expressOpenapiMiddleware.apiOperation)({tags:["Repository"],summary:"Fetch repository from remotes",parameters:[{in:"path",name:"repository",description:"Repository name",required:!0,schema:{type:"string",pattern:"^[a-zA-Z0-9-_]+$"}}],responses:{200:{description:"Repository has been fetched"},501:{content:{"application/json":{example:{error:"Not Implemented",message:"Repositories are not available"}}}}}}),(a,b)=>{"repositories"in _config.default?fetchRepository(a.params.repository).then(a=>{a?b.send({}):b.status(500).send({error:"Internal Server Error",message:"Failed to fetch remote refs"})}):b.status(501).send({error:"Not Implemented",message:"Repositories are not available"})}),routes.use("/:repository",(a,b,c)=>{(0,_common.authorize)(a.token)?/^[a-zA-Z0-9-_]+\.git$/.exec(a.params.repository)?(0,_common.serveRepository)(a,b,a.params.repository.slice(0,-4)):c():b.status(403).send({error:"Permission Denied",message:"Client is not authorized"})});