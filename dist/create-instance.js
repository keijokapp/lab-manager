"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=_default;var _child_process=require("child_process"),_nodeFetch=_interopRequireDefault(require("node-fetch")),_common=require("./common"),_v=_interopRequireDefault(require("uuid/v4")),_config=_interopRequireDefault(require("./config"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}async function lxdCreateMachine(a,b){let c=0;const d={};for(const e of a.machines[b].networks)d["nic"+c]={nictype:"bridged",parent:e.name,name:"eth"+c,type:"nic"},c++;try{if("repositories"in a.lab.machines[b]&&!("repositories"in _config.default))throw new Error("Repositories are not available");const c={name:a.machines[b].name,profiles:["lab"],devices:d,source:{type:"image",alias:a.lab.machines[b].base}};return await(0,_common.lxdRequest)("/containers",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(c)}),a.lab.machines[b].enable_private&&(await(0,_common.lxdRequest)("/containers/"+encodeURIComponent(a.machines[b].name)+"/files?path="+encodeURIComponent("/root/instance.json"),{method:"POST",body:JSON.stringify(a,null,2)})),a.lab.machines[b].enable_autostart&&(await(0,_common.lxdRequest)("/containers/"+encodeURIComponent(a.machines[b].name)+"/state",{method:"PUT",headers:{"content-type":"application/json"},body:JSON.stringify({action:"start"})})),!0}catch(c){_common.logger.error("Failed to create machine",{type:a.lab.machines[b].type,machine:b,e:c.message})}return!1}async function virtualboxCreateMachine(a,b){if(!("virtualbox"in _config.default))return _common.logger.error("Failed to create machine",{type:"virtualbox",machine:b,e:"VirtualBox is not configured"}),!1;const c={image:a.lab.machines[b].base,groups:[`/${a.lab.machines[b].base.replace(/-template$/,"")}`,`/${a.username}`],networks:a.machines[b].networks.map((c,d)=>({type:"virtualbox"===a.lab.machines[b].networks[d].type?"intnet":"bridged",name:c.name})),state:a.lab.machines[b].enable_autostart?"running":"poweroff",dmi:{"bios-version":a.machines[b].name,"bios-release-date":a.lab.machines[b].description,"system-manufacturer":"Lab Manager","system-product-name":_config.default.appUrl,"system-sku":a.machines[b].networks.map(a=>a.ip).join("|")}};a.lab.machines[b].enable_private&&(c.dmi["system-version"]=a.privateToken),"assistant"in a&&"assistant"in a.lab&&(c.dmi["system-serial-number"]=encodeURIComponent(a.lab.assistant.lab)+"/"+encodeURIComponent(a.assistant.userKey));try{const d=await(0,_common.virtualboxRequest)("/machine/"+encodeURIComponent(a.machines[b].name),{method:"PUT",body:c});if(d.ok)return!0;_common.logger.error("Failed to create machine",{machine:b,requestData:c,response:await d.text()})}catch(c){_common.logger.error("Failed to create machine",{type:a.lab.machines[b].type,machine:b,e:c.message})}return!1}async function createAssistant(a){a.timing.assistant=[Date.now()];try{const b=await(0,_nodeFetch.default)(a.lab.assistant.url+"/api/v2/labusers",{method:"POST",headers:{"content-type":"application/json",accept:"application/json","x-request-id":(0,_common.reqid)()},body:JSON.stringify({api_key:a.lab.assistant.key,host:_config.default.appUrl,username:a.username,fullname:a.username,labID:a.lab.assistant.lab,password:a.publicToken})});if(!b.ok)return _common.logger.error("Failed to communicate with assistant",{response:await b.text()}),"Failed to communicate with assistant";else{const c=await b.json();a.assistant={userKey:c.userKey,link:a.lab.assistant.url+"/lab/"+encodeURIComponent(a.lab.assistant.lab)+"/"+encodeURIComponent(c.userKey)}}}catch(a){return _common.logger.error("Failed to communicate with assistant",{e:a.message}),"Failed to communicate with assistant"}a.timing.assistant[1]=Date.now()}async function createEndpoints(a){a.timing.endpoints=[Date.now()];const b={};for(const c of a.lab.endpoints)b[c]={};try{const c=await(0,_nodeFetch.default)(_config.default.labProxy.url+"/api/endpoints/"+encodeURIComponent(a.privateToken)+"?auth-token="+encodeURIComponent(_config.default.labProxy.key),{method:"PUT",headers:{"content-type":"application/json","x-request-id":(0,_common.reqid)()},body:JSON.stringify({endpoints:b})});if(!c.ok)return _common.logger.error("Failed to create endpoints",{endpoints:b,response:await c.text()}),"Failed to create endpoints";const d=await c.json();for(const a in d.endpoints)delete d.endpoints[a].destination;a.endpoints=d.endpoints}catch(a){return _common.logger.error("Failed to create endpoints",{e:a.message}),"Failed to create endpoints"}a.timing.endpoints[1]=Date.now()}async function createGitLabContext(a){a.timing.gitlab=[Date.now()];let[b,c]=await Promise.all([(0,_common.createGitlabGroup)(a.lab.gitlab,a.publicToken),(0,_common.createGitlabUser)(a.lab.gitlab,a.publicToken)]);if(b&&c&&(await(0,_common.addGitlabUserToGroup)(a.lab.gitlab,b,c)))_common.logger.debug("Created lab instance in Gitlab",{group:b,user:c}),a.gitlab={group:b,user:c};else return"Failed to create lab instance on Gitlab";a.timing.gitlab[1]=Date.now()}async function _default(a){const b=a.lab;if(a._id="instance/"+a.lab._id+":"+a.username,"startTime"in a||(a.startTime=new Date().toISOString()),"privateToken"in a||(a.privateToken=(0,_v.default)()),"publicToken"in a||(a.publicToken=(0,_v.default)()),"labProxy"in _config.default&&(a.labProxy=_config.default.labProxy.url),"repositories"in b)for(const c in a.repositories={},b.repositories)a.repositories[c]={link:_config.default.appUrl+"/instance/"+encodeURIComponent(a.privateToken)+"/repository/"+encodeURIComponent(c)};const c=a.timing={};if("assistant"in b&&!("assistant"in a)){const b=await createAssistant(a);if(b)return b}if("endpoints"in b&&!("endpoints"in a)&&"labProxy"in _config.default){const b=await createEndpoints(a);if(b)return b}if("gitlab"in b&&!("gitlab"in a)){const b=await createGitLabContext(a);if(b)return b}if("machines"in b&&!("machines"in a)){c.networks=[Date.now()];const d=Date.now(),e={};a.machines={};try{for(const c in b.machines){const f=b.machines[c];a.machines[c]={name:f.base.replace(/-template$/,"-"+a.username+"-"+d),networks:[]};for(const b of f.networks){const g={};if(b.name.endsWith("-template")){const c=b.name.replace(/-template$/,"-"+a.username+"-"+d);"lxd"===f.type||"bridged"===b.type?(!(c in e)&&(e[c]=await(0,_common.createNetwork)(c)),g.name=e[c]):g.name=c}else g.name=b.name;a.machines[c].networks.push(g)}}}catch(b){return _common.logger.error("Failed to create networks",{e:b.message}),(0,_common.deleteNetworks)(a),"Failed to create networks"}c.networks[1]=Date.now(),c.machines={};const f=[];for(const d in a.machines)switch(b.machines[d].type){case"lxd":c.machines[d]=[Date.now()],f.push(lxdCreateMachine(a,d).then(a=>(c.machines[d][1]=Date.now(),a)));break;case"virtualbox":c.machines[d]=[Date.now()],f.push(virtualboxCreateMachine(a,d).then(a=>(c.machines[d][1]=Date.now(),a)));break;default:f.push(!1),_common.logger.error("Failed to create machine",{type:b.machines[d].type,machine:d,e:"Unknown machine type"});}const g=await Promise.all(f);if(g.includes(!1))return await(0,_common.deleteMachines)(a),await(0,_common.deleteNetworks)(a),"Failed to create machines"}try{a.timing=c,delete a._rev;const b=await _common.db.post(a);for(const d in a._id=a._id.slice(9),a._rev=b.rev,c)if(Array.isArray(c[d]))c[d]=Math.round((c[d][1]-c[d][0])/100)/10;else for(const a in c[d])c[d][a]=Math.round((c[d][a][1]-c[d][a][0])/100)/10;_common.logger.info("Created lab instance",{lab:a.lab._id,username:a.username,publicToken:a.publicToken,privateToken:a.privateToken,timing:c})}catch(b){if(a.imported||(await(0,_common.deleteMachines)(a),await(0,_common.deleteNetworks)(a)),"conflict"===b.name)return"Instance already exists";throw b}return a}